import { get, getAsArray } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import getContentPreview from "@parameter1/base-cms-marko-web-theme-monorail/utils/get-content-preview";
import { shouldOverlay, restrictContentByReg, shouldTruncate } from "@parameter1/base-cms-marko-web-theme-monorail/utils/content-meter-helpers";

$ const {
  site,
  contentMeterState,
  pagination: p,
  contentGatingHandler,
  i18n,
} = out.global;

$ const showOverlay = shouldOverlay(contentMeterState);
$ const { id, type, pageNode, ...rest } = input;
$ const sections = getAsArray(input, "sections");

$ const showReadNextBlock = defaultValue(input.showReadNextBlock, true);
$ const showBottomAdBlock = defaultValue(input.showBottomAdBlock, true);
$ const showTopStoryBlock = defaultValue(input.showTopStoryBlock, false);
$ const showMoreSection = defaultValue(input.showMoreSection, true);
$ const displayPrimaryImage = ["media-gallery"].includes(type) ? false : true;
$ const displayPublishedDate = ["company", "contact", "whitepaper"].includes(type) ? false : true;
$ const displayReadNext = showReadNextBlock && ["article"].includes(type);
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const displayComments = ["contact"].includes(type) ? false : true;
$ const newsletterConfig = site.getAsObject('newsletter.signupBannerLarge');
$ const shouldInjectAds = ["article", "video", "news", "podcast"].includes(type);
$ const withRecommended = defaultValue(input.withRecommended, true);

<global-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  ...rest
>
  <@section|{ aliases }| modifiers=["break-container", "first-sm"]>
    <if(!showOverlay)>
      <global-leaderboard-ad-block
        position="content_page"
        aliases=aliases
        billboard-name='billboard'
        modifiers=["inter-block", "combined-leaderboard"]
      />
    </if>
  </@section>

  <@section|{ blockName, content, aliases, authors }| modifiers=["content-header"]>
    $ const { primarySection } = content;
    <div class="content-page-header" role="region" aria-label="Content Information">
      <theme-content-page-breadcrumbs section=primarySection />
      <marko-web-content-name tag="h1" block-name=blockName obj=content />
      <if(type !== "contact")>
        <if(authors.length === 1)>
          <theme-author-published-node author=authors[0] content=content />
        </if>
        <else-if(authors.length > 1)>
          <theme-content-attribution obj=content elements=["authors"] />
        </else-if>
      </if>
      <if(displayPublishedDate && authors.length !== 1)>
        <theme-page-dates|{ blockName }|>
          <theme-content-published-node block-name=blockName obj=content />
        </theme-page-dates>
      </if>
      <global-sponsored-section-logo alias=primarySection.alias modifiers=["content-page"] class="mt-3" />
      <if(displaySocialShare)>
        <marko-web-social-sharing
          path=content.siteContext.path
          providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
          print-path=`/print/content/${content.id}`
        />
      </if>
    </div>
  </@section>

  <@section|{ aliases, content, authors }|>
    $ const { primarySection } = content;
    $ const inCarouselImages = getAsArray(content, "images.edges").map(edge => edge.node).filter(node => node.inCarousel);
    <div class="row">
      <div class="col-lg-8">
        <div class="content-page-body" role="region" aria-label="Content Body">
          <theme-page-contents|{ blockName }| attrs={ "data-gallery-id": id }>
            <if(!showOverlay)>
              <if(content.embedCode)>
                <marko-web-content-embed-code block-name=blockName obj=content />
              </if>
              <else-if(inCarouselImages.length)>
                <global-image-slider
                  modifiers=["project-gallery"]
                  images=inCarouselImages
                  image-options={ fit: "crop", w: 879, h: 586, auto: "format,compress" }
                />
              </else-if>
              <else-if(displayPrimaryImage)>
                $ let forceDisplay;
                $ const modifiers = [];
                $ if (["contact", "whitepaper", "document"].includes(type)) {
                  forceDisplay = "left";
                  modifiers.push('forced-left');
                }
                $ if (type === "video") forceDisplay = "none";
                <theme-primary-image-block
                  obj=content.primaryImage
                  force-display=forceDisplay
                  modifiers=modifiers
                />
              </else-if>
            </if>
            <if(content.transcript)>
              <marko-web-link href=`#transcript-${id}` class="btn btn-transcript mt-block mb-2" title="Transcript">
                <marko-web-icon name="file" modifiers=["lg"] /> Transcript
              </marko-web-link>
            </if>

            $ const requiresRegistration = contentGatingHandler({ content}) || restrictContentByReg(contentMeterState, contentGatingHandler, content);
            $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");

            <marko-web-identity-x-access|context|
              enabled=requiresRegistration
              required-access-level-ids=accessLevels
            >

              <if(shouldTruncate(contentMeterState))>
                $ const body = showOverlay ? getContentPreview({ body: content.body, selector: "p:lt(7)" }) : getContentPreview({ body: content.body, selector: "p:lt(3)" });
                <marko-web-content-body block-name=blockName obj={ body } />

                <div class="content-page-preview-overlay" />
                <if(!showOverlay)>
                  <theme-content-page-gate
                    can-access=context.canAccess
                    is-logged-in=context.isLoggedIn
                    has-required-access-level=context.hasRequiredAccessLevel
                    requires-access-level=context.requiresAccessLevel
                    requires-user-input=context.requiresUserInput
                    messages=context.messages
                    user-input-title="Step 2 of 2"
                    profile-call-to-action=""
                    profile-button-label="Create Account"
                    profile-event-name="content_meter_profile"
                  />
                </if>
                <marko-web-content-body block-name=blockName attrs={ style: "display: none;" } obj=content modifiers=["ld-json"] />
              </if>
              <else-if(!context.canAccess || context.requiresUserInput)>
                $ const body = getContentPreview({ body: content.body, selector: "p:lt(1)" });
                <marko-web-content-body block-name=blockName obj={ body } />

                <div class="content-page-preview-overlay" />
                <theme-content-page-gate
                  can-access=context.canAccess
                  is-logged-in=context.isLoggedIn
                  has-required-access-level=context.hasRequiredAccessLevel
                  requires-access-level=context.requiresAccessLevel
                  requires-user-input=context.requiresUserInput
                  messages=context.messages
                />
                <marko-web-content-body block-name=blockName attrs={ style: "display: none;" }  obj=content modifiers=["ld-json"] />
              </else-if>
              <else>

                <if(shouldInjectAds)>
                  $ const bodyId = `content-body-${content.id}`;
                  <theme-body-with-injection
                    content=content
                    aliases=aliases
                    block-name=blockName
                    selector=bodyId
                    preventHTMLInjection=false
                    mobile-leaderboard-ad-name="inline-leaderboard-mobile"
                    lazyload-first-image=false
                  />
                </if>
                <else>
                  <marko-web-content-body block-name=blockName obj=content />
                </else>
                <!-- needs input -->
                <if(input.afterBody)>
                  <${input.afterBody}
                    aliases=aliases
                    block-name=blockName
                    content=content
                  />
                </if>
                <if(type === "webinar")>
                  $ const isUpcoming = content.startDate > Date.now();
                  $ const btnLabel = (isUpcoming ? `${i18n("Register for Webinar")}` : `${i18n("View Webinar")}`)
                  <if(content.linkUrl && isUpcoming)>
                    <marko-web-link
                      class="my-block btn btn-primary btn-lg"
                      href=content.linkUrl
                      title=`Register for ${content.name}`
                      target="_blank"
                    >
                      ${btnLabel}
                    </marko-web-link>
                  </if>
                </if>
                <marko-web-content-sidebar-stubs|{ sidebar }|
                  obj=content
                  block-name=blockName
                >
                  <div id=sidebar.sequence class="page-contents__content-sidebar">
                    <p><b>${sidebar.name}</b></p>
                    <div>$!{sidebar.body}</div>
                  </div>
                </marko-web-content-sidebar-stubs>
                <if(content.transcript)>
                  <div id=`transcript-${id}` class="page-contents__content-transcript">
                    <marko-web-element block-name="page-contents" name="content-transcript-title">
                      <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                    </marko-web-element>
                    <theme-body-with-injection content={ id: `transcript-${content.id}`, body: content.transcript } with-mobile-leaderboard=false with-leaders-block=false aliases=aliases block-name=blockName />
                  </div>
                </if>
              </else>

            </marko-web-identity-x-access>

            <if(type === "document" || type === "whitepaper")>
              <theme-content-download obj=content>
                <@wufoo user-name=site.get("wufoo.userName") />
                <@link class="btn btn-primary" />
              </theme-content-download>
            </if>

            <if(type !== "contact")>
              <for|author| of=authors>
                <if(getAsArray(author, "labels").includes("Contributor"))>
                  <marko-web-content-body obj=author block-name="inline-author-bio" />
                </if>
              </for>
            </if>
            $ const slideshows = getAsArray(content, 'slideshows.edges');
            <if(slideshows.length)>
              <for|slideshow| of=slideshows>
                $ const images = getAsArray(slideshow, 'node.images.edges');
                <global-image-slider
                  images=images.map(edge => edge.node)
                  image-options={ fit: "crop", w: 879, h: 586, auto: "format,compress" }
                />
              </for>
            </if>
            <if(!newsletterConfig.disabled)>
              <identity-x-newsletter-form-inline type="inlineContent" />
            </if>
            <else>
              <theme-newsletter-signup-banner-external-block config-name="signupBannerStatic" />
            </else>

            <if(displaySocialShare)>
              <marko-web-social-sharing
                path=content.siteContext.path
                providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
                print-path=`/print/content/${content.id}`
              />
            </if>

            <if(displayComments)>
              <theme-identity-x-comment-stream content=content />
            </if>

            <if(displayReadNext)>
              <theme-read-next-block
                content-id=id
                section-id=primarySection.id
                published=content.published
              />
            </if>
          </theme-page-contents>
        </div>
      </div>
      <div class="col-lg-4 page-rail">
        <if(type !== "webinar")>
          $ const mediaQueries = [{ prop: "columns", value: 1, query: "(min-width: 700px)" }]
          <global-leaders-contextual content-id=id media-queries=mediaQueries/>
        </if>
        <if(withRecommended)>
          <div class="sticky-top">
            <global-recommended-content-block query-params={ excludeContentIds: [content.id] } alias=primarySection.alias aliases=aliases />
          </div>
        </if>
      </div>
    </div>
  </@section>

  <if(showBottomAdBlock)>
    <@section|{ aliases }|>
      <theme-gam-define-display-ad
        name="rotation"
        position="content_page"
        aliases=aliases
        show-label=true
        modifiers=["rotation", "inter-block", "content_page"]
      />
    </@section>
  </if>

  <@section|{ content }|>
    <theme-related-stories-block
      content-id=content.id
      section-id=content.primarySection.id
      with-native-x=true
    />
  </@section>

  <@section|{ content, aliases }|>
    <global-section-feed-wrapper aliases=aliases alias=content.primarySection.alias ad-name="rotation">
      <@header>More in ${content.primarySection.name}</@header>
      <@query-params excludeContentIds=[content.id] />
      <@native-x index=[1] name="default" aliases=aliases sectionName="Sponsored" />
      <@rail>
        <div class="sticky-top">
          <theme-gam-define-display-ad
            name="rail"
            position="section_page"
            aliases=input.aliases
            modifiers=[]
          />
        </div>
      </@rail>
      <@rail>
        <theme-client-side-most-popular-list-block class="sticky-top" />
      </@rail>
    </global-section-feed-wrapper>
  </@section>

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
</global-content-wrapper-layout>
