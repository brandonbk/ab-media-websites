import createOmedaIdentityBuilder from "@parameter1/base-cms-marko-web-p1-events/utils/create-omeda-identity-builder";
import { getAsObject } from "@parameter1/base-cms-object-path";
import getCookieId from "@parameter1/base-cms-marko-web-omeda-identity-x/utils/get-cookie-id";

$ const {
  site,
  req,
  nativeX,
  BAM,
  contentMeterState,
} = out.global;

$ const { cookies } = req;

$ const omedaConfig = site.get('omeda');

<marko-web-document ...input>
  <@head>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">

    <marko-web-typekit-font id="eae7fel" />
    <marko-web-google-font family="IBM+Plex+Sans:wght@300;400;500;600;700" />

    <!-- init p1 website events -->
    <marko-web-p1-events-init
      on="load"
      request-frame=true
      target-tag="body"
      identity-query-builder=createOmedaIdentityBuilder(omedaConfig.brandKey)
    />

    <!-- init bam -->
    <marko-web-broadstreet-init
      on="load"
      request-frame=true
      target-tag="body"
      config=BAM
    />

    <!-- init gtm -->
    <marko-web-gtm-init
      container-id=site.get("gtm.containerId")
      on="ready"
      request-frame=true
      target-tag="body"
    />

    <!-- init native-x -->
    <marko-web-native-x-init
      uri=nativeX.getUri()
      enabled=nativeX.isEnabled()
      on="load"
      request-frame=true
      target-tag="body"
    />

    <!-- init omeda olytics -->
    <marko-web-omeda-olytics-init
      oid="35d5f88101eb422a9e06c942ed6116a3"
      on="load"
      request-frame=true
      target-tag="body"
    />

    <${input.head} />

    <marko-web-identity-x-context|{ hasUser, user }|>
      <if(hasUser && user.id)>
        <!-- make this reusable -->
        $ const userData = {
          user_id: user.id,
        }
        $ const questions = site.get('identityX.options.gtmKeysToMap') || [];
        $ Object.entries(questions).forEach(([key, value]) => {
          const select = user.customSelectFieldAnswers.find(({id: qId}) => qId === value)
          if (select && select.answers.length) userData[key] = select.answers.map(({ label }) => label).join("|| ");
          const boolean = user.customBooleanFieldAnswers.find(({id: qId}) => qId === value)
          if (boolean && boolean.hasAnswered) userData[key] =  boolean.answer;
        });
        <marko-web-gtm-push data=userData />
      </if>
    </marko-web-identity-x-context>

    <!-- Send Encrypted Omeda Id to GTM -->
    $ const olyEncId = cookies.oly_enc_id ? getCookieId(cookies.oly_enc_id, 'enc') : undefined;
    <if(olyEncId)>
      <marko-web-gtm-push data={ oly_enc_id: olyEncId } />
    </if>
    <!-- Send Anonomouse Omeda Id to GTM -->
    $ const olyAnonId = cookies.oly_anon_id ? getCookieId(cookies.oly_anon_id, 'anon') : undefined;
    <if(olyAnonId)>
      <marko-web-gtm-push data={ oly_anon_id: olyAnonId } />
    </if>

    <!-- start gtm -->
    <marko-web-gtm-start />

  </@head>
  <@above-container>
    <marko-web-browser-component name="OmedaIdentityXRapidIdentify" />
    <marko-web-browser-component name="GlobalBroadstreetP1EventsTracker" props={ networkId: BAM.networkId } />

    <!-- Leaders -->
    <marko-web-leaders-p1events-tracker />
    <marko-web-leaders-gtm-tracker />
    <marko-web-leaders-dropdown-portal />

    <marko-web-gtm-track-bus-event
      on="newsletter-form-action"
      clear-data=true
    />
    <marko-web-gtm-track-bus-event
      on="newsletter-form-subscription"
      clear-data=true
    />
    <marko-web-identity-x-context|{ hasUser, isEnabled }|>
      <global-site-header has-user=hasUser reg-enabled=isEnabled >
        <@belowNav>
          <marko-web-block name="premium-partners" class="premium-partners__wrapper" >
            <global-premium-partners-block />
          </marko-web-block>
        </@belowNav>
      </global-site-header>
      <global-site-menu has-user=hasUser reg-enabled=isEnabled />
    </marko-web-identity-x-context>
    <if(contentMeterState && !contentMeterState.isLoggedIn)>
      <theme-content-meter-block
        views=contentMeterState.views
        view-limit=contentMeterState.viewLimit
        display-overlay=contentMeterState.displayOverlay
        display-gate=contentMeterState.displayGate
      />
    </if>
    <${input.aboveContainer} />
  </@above-container>
  <@below-container>
    <${input.belowContainer} />
    <!-- assume idx is disabled in pushdown is diesabled -->
    $ const { disabled: pushdownDisabled } = site.getAsObject('newsletter.pushdown');
    $ const useIdxNewsletterSignup = true !== pushdownDisabled;
    <theme-site-footer use-idx-newsletter-signup=useIdxNewsletterSignup />
  </@below-container>
</marko-web-document>
